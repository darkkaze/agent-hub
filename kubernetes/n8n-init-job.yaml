apiVersion: batch/v1
kind: Job
metadata:
  name: n8n-init
  namespace: "${NAMESPACE}"
  labels:
    app: n8n-init
spec:
  template:
    metadata:
      labels:
        app: n8n-init
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres -p 5432; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
      containers:
        - name: n8n-db-init
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              set -e

              echo "=== Debug Info ==="
              echo "POSTGRES_USER: ${POSTGRES_USER}"
              echo "POSTGRES_DB: ${POSTGRES_DB}"
              echo "N8N_DB_NAME: ${N8N_DB_NAME}"
              echo "N8N_DB_USER: ${N8N_DB_USER}"
              echo "=================="

              # Setup pgpass for authentication
              echo "postgres:5432:*:${POSTGRES_USER}:${POSTGRES_PASSWORD}" > ~/.pgpass
              chmod 600 ~/.pgpass

              echo "Testing connection..."
              psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT version();" || {
                echo "Connection failed!"
                exit 1
              }

              echo "Creating n8n database and user..."

              # Create user if not exists
              USER_EXISTS=$(psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -tAc \
                "SELECT 1 FROM pg_user WHERE usename = '${N8N_DB_USER}';")

              if [ -z "$USER_EXISTS" ]; then
                echo "Creating user ${N8N_DB_USER}..."
                psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \
                  "CREATE USER ${N8N_DB_USER} WITH PASSWORD '${N8N_DB_PASSWORD}';"
              else
                echo "User ${N8N_DB_USER} already exists"
              fi

              # Create database if not exists
              DB_EXISTS=$(psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -tAc \
                "SELECT 1 FROM pg_database WHERE datname = '${N8N_DB_NAME}';")

              if [ -z "$DB_EXISTS" ]; then
                echo "Creating database ${N8N_DB_NAME}..."
                psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \
                  "CREATE DATABASE ${N8N_DB_NAME} OWNER ${N8N_DB_USER};"
              else
                echo "Database ${N8N_DB_NAME} already exists"
              fi

              # Grant privileges
              echo "Granting privileges..."
              psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c \
                "GRANT ALL PRIVILEGES ON DATABASE ${N8N_DB_NAME} TO ${N8N_DB_USER};"

              echo "n8n database initialized successfully"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
            - name: N8N_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: n8n-config
                  key: DB_POSTGRESDB_DATABASE
            - name: N8N_DB_USER
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: N8N_DB_USER
            - name: N8N_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: N8N_DB_PASSWORD
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
